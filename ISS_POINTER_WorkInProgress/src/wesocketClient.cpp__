#include <WiFi.h>
#include <WebSocketsClient.h>
#include <ArduinoJson.h>

// WiFi credentials
const char* ssid = "NO WIFI FOR YOU!!!";
const char* password = "Nestle2010Nestle";

// WebSocket client
WebSocketsClient webSocket;

// JSON buffer size
const size_t bufferSize = 512;
StaticJsonDocument<bufferSize> doc;  // Using StaticJsonDocument

// Function prototypes
void webSocketEvent(WStype_t type, uint8_t* payload, size_t length);
void handleWebSocketMessage(const char* payload);

void setup() {
  // Start the Serial Monitor
  Serial.begin(115200);

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }
  Serial.println("Connected to WiFi");

  // Initialize WebSocket connection
  webSocket.begin("192.168.0.50", 4235, "/");

  // Define WebSocket event handlers
  webSocket.onEvent(webSocketEvent);
}

void loop() {
  // Keep the WebSocket connection alive
  webSocket.loop();
}

// WebSocket event handler
void webSocketEvent(WStype_t type, uint8_t* payload, size_t length) {
  switch (type) {
    case WStype_DISCONNECTED:
      Serial.println("Disconnected");
      break;
    case WStype_CONNECTED:
      Serial.println("Connected to WebSocket");
      break;
    case WStype_TEXT:
      // Call a function to handle WebSocket message
      handleWebSocketMessage((const char*)payload);
      break;
    case WStype_PONG:
    case WStype_ERROR:
      break;
  }
}

// Function to handle WebSocket message
void handleWebSocketMessage(const char* payload) {
  DeserializationError error = deserializeJson(doc, payload);
  if (error) {
    Serial.print("Failed to parse JSON: ");
    Serial.println(error.f_str());
    return;
  }

  // Retrieve values from the JSON
  const char* satName = doc["satName"];
  float altitude = doc["altitude"];
  float azimuth = doc["azimuth"];
  float elevation = doc["elevation"];
  float latitude = doc["latitude"];
  float longitude = doc["longitude"];
  float distance = doc["distance"];
  float sunAzimuth = doc["sunAzimuth"];
  float sunElevation = doc["sunElevation"];

  // Print the retrieved values
  Serial.println("Satellite Data:");
  Serial.print("Sat Name: "); Serial.println(satName);
  Serial.print("Altitude: "); Serial.println(altitude);
  Serial.print("Azimuth: "); Serial.println(azimuth);
  Serial.print("Elevation: "); Serial.println(elevation);
  Serial.print("Latitude: "); Serial.println(latitude);
  Serial.print("Longitude: "); Serial.println(longitude);
  Serial.print("Distance: "); Serial.println(distance);
  Serial.print("Sun Azimuth: "); Serial.println(sunAzimuth);
  Serial.print("Sun Elevation: "); Serial.println(sunElevation);
}
