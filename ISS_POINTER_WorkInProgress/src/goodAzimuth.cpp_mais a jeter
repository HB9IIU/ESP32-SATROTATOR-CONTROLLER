#include <Arduino.h>
#include <Stepper.h>

const int stepsPerRevolution = 2048;  // Adjust this according to your stepper motor's specs
int azimuthStepperCurrentPosition = 0;  // Variable to track the current azimuth position

// ULN2003 Motor Driver Pins for Azimuth
#define IN1azimuth 12
#define IN2azimuth 13
#define IN3azimuth 14
#define IN4azimuth 15

// Initialize the stepper library
Stepper AzimuthStepper(stepsPerRevolution, IN1azimuth, IN3azimuth, IN2azimuth, IN4azimuth);

void AzimuthStepperGotoAngle(int angle);

void setup() {
  // Set the speed at 10 rpm for the azimuth motor
  AzimuthStepper.setSpeed(20);
  
  // Initialize the serial port
  Serial.begin(115200);
}

void loop() {
  // Moving from 0° to 359° in 1-degree steps
  for (int angle = 0; angle < 360; angle++) {
    AzimuthStepperGotoAngle(angle);
    delay(0);  // Wait for 0.5 seconds at each position
  }

  // Moving back to 0° in one go
  AzimuthStepperGotoAngle(0);
  delay(5000);  // Wait for 5 seconds at position 0 before starting the next cycle
}

// Function to move the azimuth stepper to the desired angle (0-360°)
void AzimuthStepperGotoAngle(int angle) {
  // Ensure the angle is within 0-360°
  angle = constrain(angle, 0, 359); // Valid angle range is 0 to 359

  int newpos;

  // For angles 0° to 180°, calculate the position linearly
  if (angle >= 0 && angle <= 180) {
    // Linear mapping to position from 0 to 1024
    newpos = map(angle, 0, 180, 0, 1024);
  }
  // For angles 180° to 360°, calculate the position linearly but decreasing
  else {
    // Linear mapping from 1024 to 0, negative values are mirrored
    newpos = map(angle, 180, 360, -1024, 0);
  }

  // Calculate the number of steps needed to reach the target position from the current position
  int stepsToMove = newpos - azimuthStepperCurrentPosition;
  //Serial.print("Stepd to move ");
  Serial.println(stepsToMove);

  

  if (abs(stepsToMove) > 10) {
    AzimuthStepper.setSpeed(20);


} else {
    AzimuthStepper.setSpeed(1);


}


  // Move the stepper to the target position
  AzimuthStepper.step(stepsToMove);

  // Update the current position
  azimuthStepperCurrentPosition = newpos;

  // Print the movement details
  Serial.print("Azimuth Moved to ");
  Serial.print(angle);
  Serial.print(" degrees, Current Position: ");
  Serial.println(azimuthStepperCurrentPosition);
}
